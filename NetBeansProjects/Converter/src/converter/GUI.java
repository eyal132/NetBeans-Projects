/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package converter;

/**
 *
 * @author Eyal Blumental Erez
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        convert = new javax.swing.JButton();
        kelvin = new javax.swing.JTextField();
        celsius = new javax.swing.JTextField();
        fahrenheit = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        convert.setFont(new java.awt.Font("MV Boli", 1, 24)); // NOI18N
        convert.setText("Convert");
        convert.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertActionPerformed(evt);
            }
        });

        kelvin.setFont(new java.awt.Font("MV Boli", 1, 13)); // NOI18N
        kelvin.setToolTipText("");
        kelvin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelvinActionPerformed(evt);
            }
        });

        celsius.setFont(new java.awt.Font("MV Boli", 1, 13)); // NOI18N
        celsius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                celsiusActionPerformed(evt);
            }
        });

        fahrenheit.setFont(new java.awt.Font("MV Boli", 1, 13)); // NOI18N
        fahrenheit.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("NSimSun", 1, 13)); // NOI18N
        jLabel1.setText("Celsius");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("NSimSun", 1, 13)); // NOI18N
        jLabel2.setText("Fahrenheit");

        jLabel3.setFont(new java.awt.Font("NSimSun", 1, 13)); // NOI18N
        jLabel3.setText("Kelvin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(fahrenheit, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kelvin, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(convert, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(celsius, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(celsius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fahrenheit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(convert, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addComponent(kelvin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed

        String FTemp = fahrenheit.getText(); // gets text from fahrenheit box

        String CelsiusTemp = celsius.getText(); // gets text from celsius box

        String KelvinTemp = kelvin.getText(); // gets text from kelvin box

        /**
         * When convert button is pressed the code will go through these if
         * statements and checks if something is written in any of the boxes, if
         * there isn't it will show up an error message. if a letter is written
         * down it will show up an error with the try catch statement which
         * catches the "NumberFormatException" error that will appear if a
         * letter is written instead of a number.
         */
        if (!FTemp.equals("")) { // Checks if Fahrenheit text box is empty

            try {

                kelvin.setText(FahrenheitToKelvin(FTemp));

                celsius.setText(FahrenheitToCelsius(FTemp));

                // if calculation doesn't work then shows an error
            } catch (NumberFormatException ex) {

                System.out.println("Error with input" + ex);

                celsius.setText("Error!");

                kelvin.setText("Error!");
            }

            // Checks if Celsius text box is empty
        } else if (!CelsiusTemp.equals("")) {

// tries to run code if not show error which is catch statement
            try {

                fahrenheit.setText(CelsiusToFahrenheit(CelsiusTemp));

                kelvin.setText(CelsiusToKelvin(CelsiusTemp));

            } catch (NumberFormatException ex) {

                // if calculation doesn't work it shows an error
                System.out.println("Error with input" + ex);

                fahrenheit.setText("Error!");

                kelvin.setText("Error!");
            }

// Checks if Kelvin text box is empty
        } else if (!KelvinTemp.equals("")) {

            try {

                fahrenheit.setText(KelvinToFahrenheit(KelvinTemp));

                celsius.setText(KelvinToCelsius(KelvinTemp));

            } catch (NumberFormatException ex) {

                // if calculation doesn't work then shows an error
                System.out.println("Error with input" + ex);

                fahrenheit.setText("Error!");

                celsius.setText("Error!");
            }
        }
    }//GEN-LAST:event_convertActionPerformed

    /**
     * This method gets an input from "FTemp" and inserts it into the
     * calculation, this method converts fahrenheit to celsius, this is similar
     * to the fahrenheit to kelvin method, it has a try catch statement to catch
     * any letters that were inserted into the input.
     */
    public static String FahrenheitToCelsius(String FTemp) {

        String FinalResultF = "error";

        try {

            double FInput = Double.parseDouble(FTemp);

            double Result = (FInput - 32) * 0.5555555; // maths calculation for converting

            FinalResultF = Double.toString(Result);

        } catch (NumberFormatException ex) {

        }
        return FinalResultF;

    }

    /**
     * This method gets an input from "FTemp" the same variable from the
     * fahrenheit to celsius method and inserts it into the calculation, this
     * method converts fahrenheit to kelvin, it has a try catch statement to
     * catch any letters that were inserted into the input.
     */
    public static String FahrenheitToKelvin(String FTemp) {

        String FinalResultK = "error";

        /**
         * it tries to run the calculation with the "FTemp" variable, if it
         * catches the "NumberFormatException" error which is any letters that
         * were inserted into the text box, and shows an error instead of a
         * number calculation.
         */
        try {
            double FInput = Double.parseDouble(FTemp);

            double Result = (FInput - 32) * 0.555555 + 273.15; // maths calculation for converting

            FinalResultK = Double.toString(Result);

        } catch (NumberFormatException ex) {

        }
        return FinalResultK;
    }

    /**
     * This method gets an input from "KelvinTemp" the same variable from the
     * kelvin to celsius method and inserts it into the calculation, this method
     * converts kelvin to fahrenheit, it has a try catch statement to catch any
     * letters that were inserted into the input.
     */
    public static String KelvinToFahrenheit(String KelvinTemp) {

        String FinalResultK = "error";

        double KInput = Double.parseDouble(KelvinTemp);

        double Result = (KInput - 273.15) * 1.8 + 32; // maths calculation for converting

        FinalResultK = Double.toString(Result);

        return FinalResultK;

    }

    /**
     * This method gets an input from "KelvinTemp" the same variable from the
     * kelvin to fahrenheit method and inserts it into the calculation, this
     * method converts kelvin to celsius, it has a try catch statement to catch
     * any letters that were inserted into the input.
     */
    public static String KelvinToCelsius(String KelvinTemp) {

        String FinalResultK = "error";
        try {
            double KInput = Double.parseDouble(KelvinTemp);

            double Result = KInput - 273.15;

            FinalResultK = Double.toString(Result);

        } catch (NumberFormatException ex) {

        }

        return FinalResultK;
    }

    /**
     * This method gets an input from "CelsiusTemp" the same variable from the
     * celsius to kelvin method and inserts it into the calculation, this method
     * converts celsius to fahrenheit, it has a try catch statement to catch any
     * letters that were inserted into the input.
     */
    public static String CelsiusToFahrenheit(String CelsiusTemp) {
        String FinalResultC = "error";

        try {

            double CInput = Double.parseDouble(CelsiusTemp);

            double Result = CInput + 273.15;

            FinalResultC = Double.toString(Result);

        } catch (NumberFormatException ex) {

        }

        return FinalResultC;

    }

    /**
     * This method gets an input from "KelvinTemp" the same variable from the
     * celsius to fahrenheit method and inserts it into the calculation, this
     * method converts celsius to kelvin, it has a try catch statement to catch
     * any letters that were inserted into the input.
     */
    public static String CelsiusToKelvin(String CelsiusTemp) {

        String FinalResultC = "error";

        double CInput = Double.parseDouble(CelsiusTemp);

        double Result = (CInput * 1.8) + 32;

        FinalResultC = Double.toString(Result);

        return FinalResultC;

    }
    private void celsiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_celsiusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_celsiusActionPerformed

    private void kelvinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelvinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kelvinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField celsius;
    private javax.swing.JButton convert;
    private javax.swing.JTextField fahrenheit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField kelvin;
    // End of variables declaration//GEN-END:variables
}