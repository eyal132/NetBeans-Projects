/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoe;

/**
 *
 * @author Eyal Blumental Erez
 */
public class UserInput extends javax.swing.JFrame {

    /**
     * Creates new form UserInput
     */
    public UserInput() {
        initComponents();
    }

    public String turnChoice = "X";

    public int numButtonsClicked = 0;

    public boolean playerWon = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        topRightButton = new javax.swing.JButton();
        topMidButton = new javax.swing.JButton();
        topLeftButton = new javax.swing.JButton();
        midLeftButton = new javax.swing.JButton();
        midMidButton = new javax.swing.JButton();
        midRightButton = new javax.swing.JButton();
        bottomRightButton = new javax.swing.JButton();
        bottomMidButton = new javax.swing.JButton();
        bottomLeftButton = new javax.swing.JButton();
        messageText = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        twoPlayerButton = new javax.swing.JButton();
        PlayerAIButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        topRightButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        topRightButton.setEnabled(false);
        topRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topRightButtonActionPerformed(evt);
            }
        });

        topMidButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        topMidButton.setEnabled(false);
        topMidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topMidButtonActionPerformed(evt);
            }
        });

        topLeftButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        topLeftButton.setEnabled(false);
        topLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topLeftButtonActionPerformed(evt);
            }
        });

        midLeftButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        midLeftButton.setEnabled(false);
        midLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midLeftButtonActionPerformed(evt);
            }
        });

        midMidButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        midMidButton.setEnabled(false);
        midMidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midMidButtonActionPerformed(evt);
            }
        });

        midRightButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        midRightButton.setEnabled(false);
        midRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midRightButtonActionPerformed(evt);
            }
        });

        bottomRightButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        bottomRightButton.setEnabled(false);
        bottomRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomRightButtonActionPerformed(evt);
            }
        });

        bottomMidButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        bottomMidButton.setEnabled(false);
        bottomMidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomMidButtonActionPerformed(evt);
            }
        });

        bottomLeftButton.setFont(new java.awt.Font("Times New Roman", 1, 70)); // NOI18N
        bottomLeftButton.setEnabled(false);
        bottomLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomLeftButtonActionPerformed(evt);
            }
        });

        messageText.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        title.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        title.setText("Tictactoe");

        twoPlayerButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        twoPlayerButton.setText("Two Player");
        twoPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoPlayerButtonActionPerformed(evt);
            }
        });

        PlayerAIButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        PlayerAIButton.setText("Player Vs AI");
        PlayerAIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerAIButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bottomLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(midLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(topMidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(topRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(midMidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(midRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bottomMidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bottomRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 46, Short.MAX_VALUE)
                        .addComponent(title)
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(twoPlayerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PlayerAIButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(messageText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(topMidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(topRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(title)
                        .addGap(18, 18, 18)
                        .addComponent(twoPlayerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(PlayerAIButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(midRightButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(midLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(midMidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bottomLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bottomRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bottomMidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(messageText, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void topRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topRightButtonActionPerformed

        /**
         * checks if turn choice is X or O which is either player one's turn or
         * player two's turn, uses a string and changes value to "O" once it's
         * finished checking is player has won by getting the text of the
         * buttons and seeing what they equal in an if statement.
         */
        if (turnChoice == "X") {

            topRightButton.setText("X");

            turnChoice = "O";

            topRightButton.setEnabled(false);

            if (((midMidButton.getText().equals("X") && bottomLeftButton.getText().equals("X"))
                    || (midRightButton.getText().equals("X") && bottomRightButton.getText().equals("X"))
                    || (topMidButton.getText().equals("X") && topLeftButton.getText().equals("X")))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            topRightButton.setText("O");

            turnChoice = "X";

            topRightButton.setEnabled(false);

            if ((midMidButton.getText().equals("O") && bottomLeftButton.getText().equals("O"))
                    || (midRightButton.getText().equals("O") && bottomRightButton.getText().equals("O"))
                    || (topMidButton.getText().equals("O") && topLeftButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }


    }//GEN-LAST:event_topRightButtonActionPerformed

    private void topMidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topMidButtonActionPerformed

        if (turnChoice == "X") {

            topMidButton.setText("X");

            turnChoice = "O";

            topMidButton.setEnabled(false);

            if ((midMidButton.getText().equals("X") && bottomMidButton.getText().equals("X"))
                    || (topLeftButton.getText().equals("X") && topRightButton.getText().equals("X"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            topMidButton.setText("O");

            turnChoice = "X";

            topMidButton.setEnabled(false);

            if ((midMidButton.getText().equals("O") && bottomMidButton.getText().equals("O"))
                    || (topLeftButton.getText().equals("O") && topRightButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }

    }//GEN-LAST:event_topMidButtonActionPerformed

    private void topLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topLeftButtonActionPerformed

        if (turnChoice == "X") {

            topLeftButton.setText("X");

            turnChoice = "O";

            topLeftButton.setEnabled(false);

            if ((midMidButton.getText().equals("X") && bottomRightButton.getText().equals("X"))
                    || (midLeftButton.getText().equals("X") && bottomLeftButton.getText().equals("X"))
                    || (topMidButton.getText().equals("X") && topRightButton.getText().equals("X"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            topLeftButton.setText("O");

            turnChoice = "X";

            topLeftButton.setEnabled(false);

            if ((midMidButton.getText().equals("O") && bottomRightButton.getText().equals("O"))
                    || (midLeftButton.getText().equals("O") && bottomLeftButton.getText().equals("O"))
                    || (topMidButton.getText().equals("O") && topRightButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }

    }//GEN-LAST:event_topLeftButtonActionPerformed

    private void midLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midLeftButtonActionPerformed

        if (turnChoice == "X") {

            midLeftButton.setText("X");

            turnChoice = "O";

            midLeftButton.setEnabled(false);

            if ((midMidButton.getText().equals("X") && midRightButton.getText().equals("X"))
                    || (topLeftButton.getText().equals("X") && bottomLeftButton.getText().equals("X"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            midLeftButton.setText("O");

            turnChoice = "X";

            midLeftButton.setEnabled(false);

            if ((midMidButton.getText().equals("O") && midRightButton.getText().equals("O"))
                    || (topLeftButton.getText().equals("O") && bottomLeftButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }

    }//GEN-LAST:event_midLeftButtonActionPerformed

    private void midMidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midMidButtonActionPerformed

        if (turnChoice == "X") {

            midMidButton.setText("X");

            turnChoice = "O";

            midMidButton.setEnabled(false);

            if ((topMidButton.getText().equals("X") && bottomMidButton.getText().equals("X"))
                    || (midLeftButton.getText().equals("X") && midRightButton.getText().equals("X"))
                    || (bottomLeftButton.getText().equals("X") && topRightButton.getText().equals("X"))
                    || (bottomRightButton.getText().equals("X") && topLeftButton.getText().equals("X"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            midMidButton.setText("O");

            turnChoice = "X";

            midMidButton.setEnabled(false);

            if ((topMidButton.getText().equals("O") && bottomMidButton.getText().equals("O"))
                    || (midLeftButton.getText().equals("O") && midRightButton.getText().equals("O"))
                    || (bottomLeftButton.getText().equals("O") && topRightButton.getText().equals("O"))
                    || (bottomRightButton.getText().equals("O") && topLeftButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }

    }//GEN-LAST:event_midMidButtonActionPerformed

    private void midRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midRightButtonActionPerformed

        if (turnChoice == "X") {

            midRightButton.setText("X");

            turnChoice = "O";

            midRightButton.setEnabled(false);

            if ((midMidButton.getText().equals("X") && midLeftButton.getText().equals("X"))
                    || (topRightButton.getText().equals("X") && bottomRightButton.getText().equals("X"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            midRightButton.setText("O");

            turnChoice = "X";

            midRightButton.setEnabled(false);

            if ((midMidButton.getText().equals("O") && midLeftButton.getText().equals("O"))
                    || (topRightButton.getText().equals("O") && bottomRightButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }

    }//GEN-LAST:event_midRightButtonActionPerformed

    private void bottomRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomRightButtonActionPerformed

        if (turnChoice == "X") {

            bottomRightButton.setText("X");

            turnChoice = "O";

            bottomRightButton.setEnabled(false);

            if ((midMidButton.getText().equals("X") && topLeftButton.getText().equals("X"))
                    || (bottomLeftButton.getText().equals("X") && bottomMidButton.getText().equals("X"))
                    || (topRightButton.getText().equals("X") && midRightButton.getText().equals("X"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            bottomRightButton.setText("O");

            turnChoice = "X";

            bottomRightButton.setEnabled(false);

            if ((midMidButton.getText().equals("O") && topLeftButton.getText().equals("O"))
                    || (bottomLeftButton.getText().equals("O") && bottomMidButton.getText().equals("O"))
                    || (topRightButton.getText().equals("O") && midRightButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }

    }//GEN-LAST:event_bottomRightButtonActionPerformed

    private void bottomMidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomMidButtonActionPerformed

        if (turnChoice == "X") {

            bottomMidButton.setText("X");

            turnChoice = "O";

            bottomMidButton.setEnabled(false);

            if ((midMidButton.getText().equals("X") && topMidButton.getText().equals("X"))
                    || (bottomLeftButton.getText().equals("X") && bottomRightButton.getText().equals("X"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            bottomMidButton.setText("O");

            turnChoice = "X";

            bottomMidButton.setEnabled(false);

            if ((midMidButton.getText().equals("O") && topMidButton.getText().equals("O"))
                    || (bottomLeftButton.getText().equals("O") && bottomRightButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }

    }//GEN-LAST:event_bottomMidButtonActionPerformed

    private void bottomLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomLeftButtonActionPerformed

        if (turnChoice == "X") {

            bottomLeftButton.setText("X");

            turnChoice = "O";

            bottomLeftButton.setEnabled(false);

            if ((midMidButton.getText().equals("X") && topRightButton.getText().equals("X"))
                    || (bottomMidButton.getText().equals("X") && bottomRightButton.getText().equals("X"))
                    || (topLeftButton.getText().equals("X") && midLeftButton.getText().equals("X"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("X player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        } else if (turnChoice == "O") {

            bottomLeftButton.setText("O");

            turnChoice = "X";

            bottomLeftButton.setEnabled(false);

            if ((midMidButton.getText().equals("O") && topRightButton.getText().equals("O"))
                    || (bottomMidButton.getText().equals("O") && bottomRightButton.getText().equals("O"))
                    || (topLeftButton.getText().equals("O") && midLeftButton.getText().equals("O"))) {

                topRightButton.setEnabled(false);
                topMidButton.setEnabled(false);
                topLeftButton.setEnabled(false);
                midMidButton.setEnabled(false);
                midRightButton.setEnabled(false);
                midLeftButton.setEnabled(false);
                bottomMidButton.setEnabled(false);
                bottomRightButton.setEnabled(false);
                bottomLeftButton.setEnabled(false);

                messageText.setText("O player wins!!");
                            playerWon = true;

            }

            numButtonsClicked++;
            checkDraw();

        }

    }//GEN-LAST:event_bottomLeftButtonActionPerformed

    private void twoPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoPlayerButtonActionPerformed
        topRightButton.setEnabled(true);
        topMidButton.setEnabled(true);
        topLeftButton.setEnabled(true);
        midMidButton.setEnabled(true);
        midRightButton.setEnabled(true);
        midLeftButton.setEnabled(true);
        bottomMidButton.setEnabled(true);
        bottomRightButton.setEnabled(true);
        bottomLeftButton.setEnabled(true);

        topRightButton.setText("");
        topMidButton.setText("");
        topLeftButton.setText("");
        midMidButton.setText("");
        midRightButton.setText("");
        midLeftButton.setText("");
        bottomMidButton.setText("");
        bottomRightButton.setText("");
        bottomLeftButton.setText("");

        numButtonsClicked = 0;
        
        playerWon = false;

        messageText.setText("");
    }//GEN-LAST:event_twoPlayerButtonActionPerformed

    private void PlayerAIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerAIButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PlayerAIButtonActionPerformed

    public void checkDraw() {

        if (numButtonsClicked == 9 && playerWon == false) {

            messageText.setText("Draw!!");

            topRightButton.setEnabled(false);
            topMidButton.setEnabled(false);
            topLeftButton.setEnabled(false);
            midMidButton.setEnabled(false);
            midRightButton.setEnabled(false);
            midLeftButton.setEnabled(false);
            bottomMidButton.setEnabled(false);
            bottomRightButton.setEnabled(false);
            bottomLeftButton.setEnabled(false);

            topRightButton.setText("");
            topMidButton.setText("");
            topLeftButton.setText("");
            midMidButton.setText("");
            midRightButton.setText("");
            midLeftButton.setText("");
            bottomMidButton.setText("");
            bottomRightButton.setText("");
            bottomLeftButton.setText("");

            numButtonsClicked = 0;

            messageText.setText("Draw!!");

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInput().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PlayerAIButton;
    private javax.swing.JButton bottomLeftButton;
    private javax.swing.JButton bottomMidButton;
    private javax.swing.JButton bottomRightButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel messageText;
    private javax.swing.JButton midLeftButton;
    private javax.swing.JButton midMidButton;
    private javax.swing.JButton midRightButton;
    private javax.swing.JLabel title;
    private javax.swing.JButton topLeftButton;
    private javax.swing.JButton topMidButton;
    private javax.swing.JButton topRightButton;
    private javax.swing.JButton twoPlayerButton;
    // End of variables declaration//GEN-END:variables
}
